version: '3.9'

services:
  account-cmd:
    image: 'account-cmd:latest'
    build:
      context: ./account.cmd
    ports:
      - "5000:5000"
    depends_on:
      - zookeeper
      - kafka
      - mongodb
    environment:
      - kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
      - kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
      - spring.data.mongodb.host=mongodb
      - spring.data.mongodb.port=27017
      - spring.data.mongodb.database=bankAccount
      - server.port=5000
      - spring.kafka.bootstrap-servers=kafka:9092
    networks:
      - bankAccount

  account-query:
    image: 'account-query:latest'
    build:
      context: ./account.query
    ports:
      - "5001:5001"
    depends_on:
      - zookeeper
      - kafka
      - database
    environment:
      - spring.datasource.url=jdbc:mysql://database:3306/bankAccount?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      - server.port=5001
      - spring.datasource.username=root
      - spring.datasource.password=ippavlova_1990
      - spring.kafka.consumer.group-id=bankaccConsumer
      - spring.kafka.consumer.auto-offset-reset=earliest
      - spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
      - spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
      - spring.kafka.consumer.properties.spring.json.trusted.packages=*
      - spring.kafka.bootstrap-servers=kafka:9092
    networks:
      - bankAccount

  database:
    container_name: mysql-database
    image: 'mysql:latest'
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_PASSWORD: ippavlova_1990
      MYSQL_ROOT_PASSWORD: ippavlova_1990
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - bankAccount
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10


  mongodb:
    image: "mongo:latest"
    container_name: mongo-container
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - bankAccount

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - bankAccount

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
      - '9093:9093'
      - '9094:9094'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      # UNCOMMENT BELOW LINES IF YOU WISH TO CONNECT DIRECTLY TO KAFKA. YOUR MACHINE -> CONTAINER KAFKA
      # - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      # - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      #
      # BELOW ENVIRONMENT FOR CONTAINER APP ->  CONTAINER KAFKA
      # YOU MIGHT NEED TO USE PORT 9094 IN CONTAINER APP TO CONNECT
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT,BOX:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093,BOX://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093,BOX://host.docker.internal:9094
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_TOPIC_CREATION_ENABLE=true
      # - KAFKA_CFG_ALLOW_AUTO_CREATE_TOPICS=true
    depends_on:
      - zookeeper
    networks:
      - bankAccount


volumes:
  mongodb_data_container:
  db-data:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  bankAccount: